jQuery(function($) {
	var initialized = false;
	var articles = [];
	var prefs = {
		base_article_url: "http://www.cnn.com/2012/04/12/business/greece-election-explainer",
		related_api: "https://ajax.googleapis.com/ajax/services/search/news",
		api: "api",
		paragraph_min: 40,
		paragraph_max: 3000
	}
	if(typeof window.newsquest_prefs != 'undefined')
		$.extend(prefs, window.newsquest_prefs);
	
	function codify(str) {
		return str.replace(/[^A-Za-z0-9]/g, "");
	}
	
	function Paragraph() {
		this.questions = Array();
		this.text = "";
		this.code = "";
		this.used = false;
		this.article = null;
		this.viewed = false;
	}
	
	function Article() {
		// Set up the object
		this.paragraphs = Array();
		
		// Load the base article content
		this.id = "";
		this.url = "";
		this.title = "";
		this.text = "";
		
		this.load = function(article) {
			this.id = article._id;
			this.url = article.url;
			this.title = article.title;
			this.text = article.paragraphs.join("\n");
			
			// Create Paragraph Objects
			for(var x in article.paragraphs) {
				var paragraph = new Paragraph();
				paragraph.text = article.paragraphs[x];
				paragraph.code = codify(paragraph.text);
				paragraph.article = this;
				this.paragraphs.push(paragraph);
			}
		};
		
		this.linkQuestions = function(questions) {
			for(var x in questions) {
				var question = new Question();
				question.load(questions[x]);
				
				// Find the paragraph with this question
				for(var y in this.paragraphs) {
					if(this.paragraphs[y].code.indexOf(codify(question.answer)) != -1) {
						question.paragraph = this.paragraphs[y];
						this.paragraphs[y].questions.push(question);
					}
				}
			}
		}
		
	}
	
	function Question() {
		this.id = "";
		this.question = "";
		this.answer = "";
		this.skipped = false;
		this.view_count = "";
		this.skip_count = "";
		this.paragraph = null;
		
		this.load = function(question) {
			this.id = question._id;
			this.question = question.question;
			this.answer = question.answer;
			this.question = question.question;
			this.view_count = question.view_count;
			this.skip_count = question.skip_count;
		};
		
		this.view = function() {
			if(this.id == "") return;
			
			this.viewed = true;
			this.view_count++;
			$.ajax({
				context: this,
				dataType: "json",
				error: function(jqXHR, textStatus, errorThrown) {
					console.log(errorThrown);
				},
				type: "put",
				success: function(data, textStatus, jqXHR) {
					console.log(data);
				},
				url: prefs.api + "/question/" + this.id + "/view"
			});
		};
		
		this.skip = function() {
			if(this.id == "") return;
			
			this.skipped = true;
			this.skip_count++;
			$.ajax({
				context: this,
				dataType: "json",
				error: function(jqXHR, textStatus, errorThrown) {
					console.log(errorThrown);
				},
				type: "put",
				success: function(data, textStatus, jqXHR) {
					console.log(data);
				},
				url: prefs.api + "/question/" + this.id + "/skip"
			});
		};
	}
	
	function loadQuestions(article, callback) {
		// Load article questions
		$.ajax({
			context: this,
			data: {
				article: article.id
			},
			dataType: "json",
			error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
			type: "get",
			success: function(questions, textStatus, jqXHR) {
				if(questions.length == 0) { // Questions doesn't exist for this article
					$.ajax({
						context: this,
						data: {
							a: article.id
						},
						dataType: "json",
						error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
						type: "post",
						success: function(ids, textStatus, jqXHR) {
							$.ajax({
								context: this,
								data: {
									article: article.id
								},
								dataType: "json",
								error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
								type: "get",
								success: function(questions, textStatus, jqXHR) {
									article.linkQuestions(questions);
									callback(article);
								},
								url: prefs.api + "/questions"
							});
						},
						url: prefs.api + "/questions"
					});
					return;
				}
				article.linkQuestions(questions);
				callback(article);
			},
			url: prefs.api + "/questions"
		});
	}
	
	function loadArticle(url, callback) {
		if(url == null)
			callback(null);
		
		$.ajax({
			data: {
				url: url
			},
			dataType: "json",
			error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
			type: "get",
			success: function(data, textStatus, jqXHR) {
				if(data.length == 0) { // Article doesn't exist in the system
					$.ajax({
						context: this,
						data: {
							l: url
						},
						dataType: "json",
						error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
						type: "post",
						success: function(id, textStatus, jqXHR) {
							$.ajax({
								context: this,
								data: {},
								dataType: "json",
								error: function(jqXHR, textStatus, errorThrown) { console.log(errorThrown); },
								type: "get",
								success: function(data, textStatus, jqXHR) {
									if(data == null) return null; // Give up
									var article = new Article();
									article.load(data);
									articles.push(article);
									callback(article);
								},
								url: prefs.api + "/article/" + id
							});
						},
						url: prefs.api + "/articles"
					});
				} else {
					var article = new Article();
					article.load(data[0]);
					articles.push(article);
					callback(article);
				}
			},
			url: prefs.api + "/articles"
		});
	}

	function articleCallback(article) {
		if(article != null)
			loadQuestions(article, questionCallback);
	}
	
	function questionCallback(article) {
		if(articles.length < 10)
			loadRelatedArticles(article);
		if(!initialized && articles.length > 5)
			initialize(article.paragraphs[0]);
	}
	
	function loadRelatedArticles(article) {
		$.ajax({
			data: {
				v: '1.0',
				q: article.title,
				rsz: 8
			},
			dataType: "jsonp",
			error: function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown);
			},
			type: "get",
			success: function(data, textStatus, jqXHR) {
				if(data.responseStatus != 200)
					return;
				for(x in data.responseData.results)
					loadArticle(data.responseData.results[x].unescapedUrl, articleCallback);
			},
			url: prefs.related_api
		});
	}
	
	
	
	
	/* Temporary Methods */
	function randomParagraph() {
		var paragraph;
		while(!paragraph) {
			var articleIndex = Math.floor(Math.random() * articles.length);
			var paragraphIndex = Math.floor(Math.random() * articles[articleIndex].paragraphs.length);
			paragraph = articles[articleIndex].paragraphs[paragraphIndex];
			if(!paragraph || paragraph.questions.length == 0 || paragraph.viewed)
				paragraph = false;
		}
		return paragraph;
	}
	
	function initialize(firstParagraph) {
		initialized = true;
		var question = new Question();
		question.paragraph = firstParagraph;
		viewChapter(question);
	}
	
	/* UX Methods */
	function getNextQuestions() {
		var paragraphs = [];
		var questions = [];
		
		while(questions.length < 2) {
			var articleIndex = Math.floor(Math.random() * articles.length);
			var paragraphIndex = Math.floor(Math.random() * articles[articleIndex].paragraphs.length);
			var paragraph = articles[articleIndex].paragraphs[paragraphIndex];
			
			// Make sure the paragraph is valid
			if(paragraph.viewed || paragraphs.indexOf(paragraph) != -1)
				continue;
				
			// Pick the first valid question for this paragraph
			for(var questionIndex in paragraph.questions) {
				if(!paragraph.questions[questionIndex].skipped || paragraph.questions[questionIndex].skip_count > 4) {
					paragraphs.push(articles[articleIndex].paragraphs[paragraphIndex]);
					questions.push(articles[articleIndex].paragraphs[paragraphIndex].questions[questionIndex]);
					break;
				}
			}
		}
		
		return questions;
	}
	
	function viewChapter(question) {
		question.view();
		question.paragraph.viewed = true;
		
		var questions = getNextQuestions();
		
		var container = $("<div />");
		container.addClass("container");
		container.hide();
		
		var chapter = $("<div />");
		chapter.addClass("page");
		container.append(chapter);
		
		var skeleton = $("<div />");
		skeleton.addClass("nine");
		skeleton.addClass("columns");
		skeleton.addClass("offset-by-three");
		chapter.append(skeleton);
		
		var paragraph = $("<p />");
		paragraph.html(question.paragraph.text);
		skeleton.append(paragraph);
		
		var questionA = $("<div />");
		questionA.addClass("question");
		questionA.html("<a>" + questions[0].question + "</a>");
		$.data(questionA.get(0), "question", questions[0]);
		skeleton.append(questionA);
		
		var questionB = $("<div />");
		questionB.addClass("question");
		questionB.html("<a>" + questions[1].question + "</a>");
		$.data(questionB.get(0), "question", questions[1]);
		skeleton.append(questionB);
		
		var questionTools = $("<div />");
		questionTools.addClass("tools");
		questionTools.show();
		
		var questionSkip = $("<div />");
		questionSkip.addClass("skip");
		questionSkip.html('<i class="icon-remove"></i>');
		questionSkip.click(function() {
			var question = $(this).parent().parent().data("question");
			question.skip();
			$(this).parent().parent().remove();
			return false;
		});
		questionTools.append(questionSkip);
		
		questionA.append(questionTools.clone(true));
		questionB.append(questionTools.clone(true));
				
		var options = $("<div />");
		options.addClass("options");
		skeleton.append(options);
		
		$("body").append(container);
		container.show();
		
		$(chapter).find('.question').click(function() {
			$(this).parent().css({opacity: .4});
			viewChapter($(this).data("question"));
		});
		
		// Scroll whole story up to center next Chapter
		$.scrollTo(chapter);
	}	
	
	// Set up the first article
	loadArticle(prefs.base_article_url, loadRelatedArticles)
});